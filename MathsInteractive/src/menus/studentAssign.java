//Author: Andrew Southam
package menus;

import administration.Login;
import java.awt.Window;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Andrew
 */
public class studentAssign extends javax.swing.JFrame {

    int UserID = 1;
    /** Creates new form studentAssign */
    public studentAssign(int userID) {
        
        this.UserID = userID;
        initComponents();
        userDetails();
        packSelect.setEnabled(false);    
        packAdd.setEnabled(false);
        packText.setText("Select Student");
        fillClassList();
        fillStudentSelect();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jComboBox4 = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        lblLogo2 = new javax.swing.JLabel();
        UserDetails = new javax.swing.JLabel();
        lblUserLevel2 = new javax.swing.JLabel();
        btnLogout2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        back = new javax.swing.JButton();
        studentSort = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        packBoard = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        packText = new javax.swing.JLabel();
        packSelect = new javax.swing.JComboBox();
        packAdd = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        classSort = new javax.swing.JComboBox();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setBackground(new java.awt.Color(179, 218, 255));
        jPanel4.setMaximumSize(new java.awt.Dimension(608, 553));
        jPanel4.setMinimumSize(new java.awt.Dimension(608, 553));

        lblLogo2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogo2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Additional/logo.png"))); // NOI18N
        lblLogo2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        UserDetails.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        UserDetails.setForeground(new java.awt.Color(5, 24, 42));
        UserDetails.setText("FName LName (UserID)");

        lblUserLevel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblUserLevel2.setForeground(new java.awt.Color(5, 24, 42));
        lblUserLevel2.setText("TEACHER");

        btnLogout2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnLogout2.setForeground(new java.awt.Color(5, 24, 42));
        btnLogout2.setText("Logout");
        btnLogout2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogout2ActionPerformed(evt);
            }
        });

        back.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        back.setForeground(new java.awt.Color(5, 24, 42));
        back.setText("Back");
        back.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                backComponentHidden(evt);
            }
        });
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        studentSort.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        studentSort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0-No Student Selected" }));
        studentSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentSortActionPerformed(evt);
            }
        });

        packBoard.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        packBoard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Current Pack", "Pack 1", "Pack 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(packBoard);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Sort By Class:");

        packText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        packText.setText("Pack To Add:");

        packSelect.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        packSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0-No Pack Selected" }));
        packSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                packSelectActionPerformed(evt);
            }
        });

        packAdd.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        packAdd.setText("Add");
        packAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                packAddActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Student:");

        classSort.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        classSort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0-No Class Selected" }));
        classSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classSortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addComponent(jSeparator3)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(lblLogo2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(UserDetails)
                                    .addComponent(lblUserLevel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnLogout2))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(back)))
                        .addGap(30, 30, 30))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(classSort, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(packSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(packAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(packText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(studentSort, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(26, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLogo2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnLogout2))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(UserDetails)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblUserLevel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(classSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(studentSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(packText)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(packSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(packAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(back)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     private void userDetails() {

        String name = null;

        String sql = "SELECT FName, LName FROM UserDetails WHERE user_ID = ?";

        try {
            Connection conn = databaseconn.connectToDB();

            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, UserID);
            ResultSet userDetailsResults = pstmt.executeQuery();

            while (userDetailsResults.next()) {
                String Fname = userDetailsResults.getString("FName");
                String Lname = userDetailsResults.getString("LName");
                name = (Fname + " " + Lname);
            }
            UserDetails.setText(name + " (" + this.UserID + ")");
        } catch (SQLException e) {

        }
    }
    
    private void assignPack(){
        Object classID2 = packSelect.getSelectedItem();
        String classID3 = classID2.toString();
        String[] parts = classID3.split("-");
        int packID = Integer.parseInt(parts[0]);
        
        Object studentID2 = studentSort.getSelectedItem();
        String studentID3 = studentID2.toString();
        String[] studentparts = studentID3.split("-");
        int studentID = Integer.parseInt(studentparts[0]);
        
        if(packID != 0){
          
            String sql = "SELECT Buffer1,Buffer2 FROM QuizBuffer WHERE student_ID =" + studentID;
        
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
               int buffer1ID = rs.getInt("Buffer1");
               int buffer2ID = rs.getInt("Buffer2");

               if (buffer1ID == 0){
               String sql2 = "UPDATE QuizBuffer SET Buffer1 = ?" + "WHERE student_ID = ?";
               try{PreparedStatement pstmt = conn.prepareStatement(sql2);
               pstmt.setInt(1, packID);
               pstmt.setInt(2, studentID);
               pstmt.executeUpdate();
               }
               catch(SQLException e){
                   System.out.println(e.getMessage());
               }
               }
               else if(buffer2ID == 0){
               String sql3 = "UPDATE QuizBuffer SET Buffer2 = ?"+"WHERE student_ID = ? ";
               PreparedStatement pstmt = conn.prepareStatement(sql3);
               pstmt.setInt(1, packID);
               pstmt.setInt(2, studentID);
               pstmt.executeUpdate();
               }
               
               else{
               String sql4 = "UPDATE QuizBuffer SET Buffer3 = ?"+"WHERE student_ID = ?"; 
               PreparedStatement pstmt = conn.prepareStatement(sql4);
               pstmt.setInt(1, packID);
               pstmt.setInt(2, studentID);
               pstmt.executeUpdate();
               }

            }
            
        }
        catch (SQLException e) {
            
        } 
            
        }
        
        
        
        
        
        
        
    }
    
    
    
    
    private void fillPackMenu(){
    Object classID2 = studentSort.getSelectedItem();
        String classID3 = classID2.toString();
        String[] parts = classID3.split("-");
        int classID4 = Integer.parseInt(parts[0]);
    
        for(int i=packSelect.getItemCount()-1;i>=1;i--){
            packSelect.removeItemAt(i);
            }
        
        if(classID4 == 0){
        packText.setText("No Student Selected");
                packSelect.setEnabled(false);    
                packAdd.setEnabled(false);
        }
        else
        {
            ArrayList<Integer> quizBuffer = new ArrayList<Integer>();
            ArrayList<Integer> packsAdded = new ArrayList<Integer>();
            
        String sql = "SELECT Buffer1 FROM QuizBuffer WHERE student_ID =" + classID4;
        
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
               int buffer1ID = rs.getInt("Buffer1");
               if (buffer1ID != 0){
                   quizBuffer.add(buffer1ID);
               }
                
               

            }
        }
        
        catch (SQLException e) {
            
        } 
        sql = "SELECT Buffer2 FROM QuizBuffer WHERE student_ID =" + classID4;
        
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
               int buffer2ID = rs.getInt("Buffer2");
               if (buffer2ID != 0){
                   quizBuffer.add(buffer2ID);
               }
            }
        }
        
        catch (SQLException e) {
            
        } 
        
        sql = "SELECT Buffer3 FROM QuizBuffer WHERE student_ID =" + classID4;
      
        
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
               int buffer3ID = rs.getInt("Buffer3");
               if (buffer3ID != 0){
                    quizBuffer.add(buffer3ID);
               }
               
               }
               
            
        }
        catch (SQLException e) {
            
        }
         sql = "SELECT quiz_ID FROM results WHERE student_ID =" + classID4;
      
        
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
               int quizID = rs.getInt("quiz_ID");
                    quizBuffer.add(quizID);
               }
               
            
        }
        catch (SQLException e) {
            
        
        }
        
            sql = "SELECT name, pack_ID FROM LearningPackages"; 
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
               String quizName = rs.getString("name");
               int quizID = rs.getInt("pack_ID");

                  if (quizBuffer.contains(quizID)){
                   
                  }
                  else{
                      String quiz = quizID + "-" + quizName;
                      packSelect.addItem(quiz);
                      packsAdded.add(quizID);
                  }     
            }
        }
        catch (SQLException e) {
            
        }
        if(packsAdded.isEmpty()){
            packText.setText("No more Pack's Available For this Student");
                packSelect.setEnabled(false);    
                packAdd.setEnabled(false);
        }
                
}//else end
}


    private void sortStudentSelect(){
    Object classID2 = classSort.getSelectedItem();
        String classID3 = classID2.toString();
        String[] parts = classID3.split("-");
        int classID4 = Integer.parseInt(parts[0]);
        
        for(int i=studentSort.getItemCount()-1;i>=1;i--){
            studentSort.removeItemAt(i);
            }
        
        
        if(classID4 == 0){
        String sql = "SELECT student_ID FROM StudentDetails";
        String sql2 = "SELECT  FName,LName FROM UserDetails WHERE user_ID = ?";
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
            int ID = rs.getInt("student_ID");
            PreparedStatement pstmt = conn.prepareStatement(sql2);
            pstmt.setInt(1, ID);
            ResultSet rs2 = pstmt.executeQuery();
            
            while (rs2.next()) {
                String Fname = rs2.getString("FName");
                String Lname = rs2.getString("LName");
                String name = (ID + "-"+ Fname + " " + Lname);
                studentSort.addItem(name);
            }
                
        } 
            
        }
            catch (SQLException e) {

        }    
            
        }
        else{
            
    String sql = "SELECT student_ID FROM StudentDetails WHERE class_ID =" + classID4;
    String sql2 = "SELECT  FName,LName FROM UserDetails WHERE user_ID = ?";
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
            int ID = rs.getInt("student_ID");
            PreparedStatement pstmt = conn.prepareStatement(sql2);
            pstmt.setInt(1, ID);
            ResultSet rs2 = pstmt.executeQuery();
            
            while (rs2.next()) {
                String Fname = rs2.getString("FName");
                String Lname = rs2.getString("LName");
                String name = (ID + "-"+ Fname + " " + Lname);
                studentSort.addItem(name);
            }
                
        } 
            
        }
            catch (SQLException e) {

        }
        }
    
    
}
    private void fillClassList(){
        String sql = "SELECT class_ID FROM ClassTeacher WHERE teacher_ID = "+ UserID;

        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
            classSort.addItem(rs.getString("class_ID")+ "-Class");
                
        } 
        }
            catch (SQLException e) {

        }
    
    
}
    
    private void fillPackSelect (){
    
    
    
    
    
}
    private void fillTable(){
        Object classID2 = studentSort.getSelectedItem();
        String classID3 = classID2.toString();
        String[] parts = classID3.split("-");
        int classID4 = Integer.parseInt(parts[0]);
        
        if(classID4 == 0){
            String currentPack = "None";
            String pack1 = "None";
            String pack2 ="None";
     
     DefaultTableModel model = (DefaultTableModel) packBoard.getModel();
            model.addRow(new Object[]{currentPack,pack1,pack2}); 
        }
        else{
           String currentPack = "None";
     String pack1 = "None";
     String pack2 ="None";
    
        String sql = "SELECT Buffer1 FROM QuizBuffer WHERE student_ID =" + classID4;
        String sql2  = "SELECT Name FROM LearningPackages WHERE pack_ID = ?";
        
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
               int buffer1ID = rs.getInt("Buffer1");

               PreparedStatement pstmt = conn.prepareStatement(sql2);
                pstmt.setInt(1, buffer1ID);
                ResultSet rs2 = pstmt.executeQuery();
                while (rs2.next()) {
                currentPack = rs2.getString("Name");
                
                }
            }
        }
        
        catch (SQLException e) {
            
        } 
        sql = "SELECT Buffer2 FROM QuizBuffer WHERE student_ID =" + classID4;
        sql2  = "SELECT Name FROM LearningPackages WHERE pack_ID = ?";
        
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
               int buffer2ID = rs.getInt("Buffer2");
               PreparedStatement pstmt = conn.prepareStatement(sql2);
                pstmt.setInt(1, buffer2ID);
                ResultSet rs2 = pstmt.executeQuery();
                while (rs2.next()) {
                pack1 = rs2.getString("Name");
                
                }
            }
        }
        
        catch (SQLException e) {
            
        } 
        
        sql = "SELECT Buffer3 FROM QuizBuffer WHERE student_ID =" + classID4;
        sql2  = "SELECT Name FROM LearningPackages WHERE pack_ID = ?";
        
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
               int buffer3ID = rs.getInt("Buffer3");
               
                PreparedStatement pstmt = conn.prepareStatement(sql2);
                pstmt.setInt(1, buffer3ID);
                ResultSet rs2 = pstmt.executeQuery();
                while (rs2.next()) {
                pack2 = rs2.getString("Name");
                }
                
               }
               
            
        }
        catch (SQLException e) {
            
        }
        DefaultTableModel model = (DefaultTableModel) packBoard.getModel();
            model.addRow(new Object[]{currentPack,pack1,pack2}); 
        }
     
        
    }
    
    private void fillStudentSelect(){
       
    String sql = "SELECT student_ID FROM StudentDetails";
    String sql2 = "SELECT  FName,LName FROM UserDetails WHERE user_ID = ?";
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
            int ID = rs.getInt("student_ID");
            PreparedStatement pstmt = conn.prepareStatement(sql2);
            pstmt.setInt(1, ID);
            ResultSet rs2 = pstmt.executeQuery();
            
            while (rs2.next()) {
                String Fname = rs2.getString("FName");
                String Lname = rs2.getString("LName");
                String name = (ID + "-"+ Fname + " " + Lname);
                studentSort.addItem(name);
            }
                
        } 
            
        }
            catch (SQLException e) {

        }
    
} 
    
    private void packFullCheck()
    {
     Object classID2 = studentSort.getSelectedItem();
        String classID3 = classID2.toString();
        String[] parts = classID3.split("-");
        int classID4 = Integer.parseInt(parts[0]);
        
     String sql  = "SELECT buffer3 FROM QuizBuffer WHERE student_ID = "+ classID4;
     
     int packID = 0;
            

            
            try {
                Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {

                    packID = rs.getInt("Buffer3");
                }

            } catch (SQLException e) {

            }
            
            if(packID != 0)
            {
                packText.setText("This student's buffer is full, Cannot Add pack");
                packSelect.setEnabled(false);    
                packAdd.setEnabled(false);
            }
            else{
                packSelect.setEnabled(true);    
                packAdd.setEnabled(true); 
                packText.setText("Pack to Add:");
            }
            
    }
    
    private void btnLogout2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogout2ActionPerformed
        for (Window w : java.awt.Window.getWindows()) {
            w.setVisible(false);
            w.dispose();
        }

        Login loginFrame = new Login();
        loginFrame.setLocationRelativeTo(null);
        loginFrame.setVisible(true);
    }//GEN-LAST:event_btnLogout2ActionPerformed

    private void backComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_backComponentHidden

    }//GEN-LAST:event_backComponentHidden

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_backActionPerformed

    private void studentSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentSortActionPerformed
        DefaultTableModel model = (DefaultTableModel) packBoard.getModel();
        model.setRowCount(0);
        fillTable();
        packFullCheck();
        fillPackMenu();
    }//GEN-LAST:event_studentSortActionPerformed

    private void classSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classSortActionPerformed
        sortStudentSelect();
        
    }//GEN-LAST:event_classSortActionPerformed

    private void packSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_packSelectActionPerformed

    private void packAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packAddActionPerformed
        assignPack();
        DefaultTableModel model = (DefaultTableModel) packBoard.getModel();
        model.setRowCount(0);
        fillTable();
        packFullCheck();
        fillPackMenu();
    }//GEN-LAST:event_packAddActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel UserDetails;
    private javax.swing.JButton back;
    private javax.swing.JButton btnLogout2;
    private javax.swing.JComboBox classSort;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblLogo2;
    private javax.swing.JLabel lblUserLevel2;
    private javax.swing.JButton packAdd;
    private javax.swing.JTable packBoard;
    private javax.swing.JComboBox packSelect;
    private javax.swing.JLabel packText;
    private javax.swing.JComboBox studentSort;
    // End of variables declaration//GEN-END:variables

}
