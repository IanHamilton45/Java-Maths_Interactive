//Author: Andrew Southam
package menus;

import administration.Login;
import java.awt.Window;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author w15008457
 */
public class studentDetails extends javax.swing.JFrame {

    int userID = 0;
    /**
     * Creates new form studentDetails
     */
    public studentDetails(int UserID) {
        this.userID = UserID;
        initComponents();
        userDetails();
        fillTable();
        fillClassList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        lblLogo3 = new javax.swing.JLabel();
        lblUserLevel3 = new javax.swing.JLabel();
        btnLogout3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        back = new javax.swing.JButton();
        lblInformation = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        leaderboard = new javax.swing.JTable();
        UserDetails = new javax.swing.JLabel();
        classSort = new javax.swing.JComboBox<String>();
        jLabel1 = new javax.swing.JLabel();
        classSortButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel5.setBackground(new java.awt.Color(179, 218, 255));

        lblLogo3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogo3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Additional/logo.png"))); // NOI18N
        lblLogo3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblUserLevel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblUserLevel3.setForeground(new java.awt.Color(5, 24, 42));
        lblUserLevel3.setText("TEACHER");

        btnLogout3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnLogout3.setForeground(new java.awt.Color(5, 24, 42));
        btnLogout3.setText("Logout");
        btnLogout3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogout3ActionPerformed(evt);
            }
        });

        back.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        back.setForeground(new java.awt.Color(5, 24, 42));
        back.setText("Back");
        back.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                backComponentHidden(evt);
            }
        });
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        lblInformation.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblInformation.setForeground(new java.awt.Color(200, 0, 0));
        lblInformation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInformation.setText(" ");
        lblInformation.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        leaderboard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student Name", "Class", "Current Pack", "% Done", "Pack 1", "Pack 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        leaderboard.getTableHeader().setReorderingAllowed(false);
        leaderboard.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                leaderboardComponentAdded(evt);
            }
        });
        leaderboard.setAutoCreateRowSorter(true);
        jScrollPane2.setViewportView(leaderboard);
        if (leaderboard.getColumnModel().getColumnCount() > 0) {
            leaderboard.getColumnModel().getColumn(1).setPreferredWidth(5);
            leaderboard.getColumnModel().getColumn(3).setPreferredWidth(10);
            leaderboard.getColumnModel().getColumn(5).setResizable(false);
        }

        UserDetails.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        UserDetails.setForeground(new java.awt.Color(5, 24, 42));
        UserDetails.setText("FName LName (UserID)");

        classSort.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        classSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classSortActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Class:");

        classSortButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        classSortButton.setText("Sort");
        classSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classSortButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addComponent(jSeparator3)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(lblLogo3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUserLevel3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UserDetails))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLogout3)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(156, 156, 156))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(classSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classSortButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(back)
                        .addGap(73, 73, 73))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLogo3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(UserDetails)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblUserLevel3))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnLogout3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInformation)
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(classSortButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(classSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void fillClassList(){
        String sql = "SELECT class_ID FROM ClassTeacher WHERE teacher_ID = "+ userID;

        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
            classSort.addItem(rs.getString("class_ID"));
                
        } 
        }
            catch (SQLException e) {

        }
    
    
}

    
    
    private void userDetails() {

        String name = " ";

        String sql = "SELECT FName, LName FROM UserDetails WHERE user_ID = ?";

        try {
            Connection conn = databaseconn.connectToDB();

            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, userID);
            ResultSet userDetailsResults = pstmt.executeQuery();

            while (userDetailsResults.next()) {
                String Fname = userDetailsResults.getString("FName");
                String Lname = userDetailsResults.getString("LName");
                name = (Fname + " " + Lname);
            }
            UserDetails.setText(name + " (" + this.userID + ")");
        } catch (SQLException e) {

        }
    }
    private void fillTable(){
    ArrayList<String> studentName = new ArrayList<String>(); 
    ArrayList<Integer> classID = new ArrayList<Integer>();
    ArrayList<Integer> percentage = new ArrayList<Integer>();
    ArrayList<String> currentPack = new ArrayList<String>();
    ArrayList<String> pack1 = new ArrayList<String>();
    ArrayList<String> pack2= new ArrayList<String>();
    
        String sql = "SELECT student_ID, class_ID,PackProgress FROM StudentDetails";
        String sql2  = "SELECT FName,LName FROM UserDetails WHERE user_ID = ?";
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            while (rs.next()) {
                int studentID = rs.getInt("student_ID"); 
                classID.add(rs.getInt("class_ID"));
                percentage.add(rs.getInt("PackProgress"));
                
                PreparedStatement pstmt = conn.prepareStatement(sql2);
                pstmt.setInt(1, studentID);
                ResultSet rs2 = pstmt.executeQuery();
                while (rs2.next()) {
                String FName = rs2.getString("FName");
                String LName = rs2.getString("LName");
                studentName.add(FName + " " +LName);
                }
                
            }
        
        } catch (SQLException e) {
            
        } 
        sql = "SELECT Buffer1 FROM QuizBuffer";
        sql2  = "SELECT Name FROM LearningPackages WHERE pack_ID = ?";
        
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
               int buffer1ID = rs.getInt("Buffer1");
                if (buffer1ID == 0){
                currentPack.add("None");   
               }
               else{
               PreparedStatement pstmt = conn.prepareStatement(sql2);
                pstmt.setInt(1, buffer1ID);
                ResultSet rs2 = pstmt.executeQuery();
                while (rs2.next()) {
                currentPack.add(rs2.getString("Name"));
                }
                }
            }
        }
        
        catch (SQLException e) {
            
        } 
        sql = "SELECT Buffer2 FROM QuizBuffer";
        sql2  = "SELECT Name FROM LearningPackages WHERE pack_ID = ?";
        
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
               int buffer2ID = rs.getInt("Buffer2");
                if (buffer2ID == 0){
                pack1.add("None");   
               }
               else{
               PreparedStatement pstmt = conn.prepareStatement(sql2);
                pstmt.setInt(1, buffer2ID);
                ResultSet rs2 = pstmt.executeQuery();
                while (rs2.next()) {
                pack1.add(rs2.getString("Name"));
                }
                }
            }
        }
        
        catch (SQLException e) {
            
        } 
        sql = "SELECT Buffer3 FROM QuizBuffer";
        sql2  = "SELECT Name FROM LearningPackages WHERE pack_ID = ?";
        
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
               int buffer3ID = rs.getInt("Buffer3");
               if (buffer3ID == 0){
                pack2.add("None");   
               }
               else{
                PreparedStatement pstmt = conn.prepareStatement(sql2);
                pstmt.setInt(1, buffer3ID);
                ResultSet rs2 = pstmt.executeQuery();
                while (rs2.next()) {
                pack2.add(rs2.getString("Name"));
                }
                
               }
               
            }
        }
        
        catch (SQLException e) {
            
        } 
        for(int i = 0; i < studentName.size();i++){
            DefaultTableModel model = (DefaultTableModel) leaderboard.getModel();
            model.addRow(new Object[]{studentName.get(i),classID.get(i),currentPack.get(i),percentage.get(i),pack1.get(i),pack2.get(i)});
        }
}
    
    
    private void btnLogout3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogout3ActionPerformed
        for (Window w : java.awt.Window.getWindows()) {
            w.setVisible(false);
            w.dispose();
        }

        Login loginFrame = new Login();
        loginFrame.setLocationRelativeTo(null);
        loginFrame.setVisible(true);
    }//GEN-LAST:event_btnLogout3ActionPerformed

    private void backComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_backComponentHidden

    }//GEN-LAST:event_backComponentHidden

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_backActionPerformed

    private void leaderboardComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_leaderboardComponentAdded

    }//GEN-LAST:event_leaderboardComponentAdded

    private void classSortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classSortButtonActionPerformed
       DefaultTableModel model = (DefaultTableModel) leaderboard.getModel();
       model.setRowCount(0);
        Object classID2 = classSort.getSelectedItem();
        String classID3 = classID2.toString();
        int classID4 = Integer.parseInt(classID3);
        
        
    ArrayList<String> studentName = new ArrayList<String>(); 
    ArrayList<Integer> classID = new ArrayList<Integer>();
    ArrayList<Integer> percentage = new ArrayList<Integer>();
    ArrayList<String> currentPack = new ArrayList<String>();
    ArrayList<String> pack1 = new ArrayList<String>();
    ArrayList<String> pack2= new ArrayList<String>();
    
        String sql = "SELECT student_ID, class_ID,PackProgress FROM StudentDetails WHERE class_ID = ?";
        String sql2  = "SELECT FName,LName FROM UserDetails WHERE user_ID = ?";
        try {
            Connection conn = databaseconn.connectToDB();
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, classID4);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                int studentID = rs.getInt("student_ID"); 
                classID.add(rs.getInt("class_ID"));
                percentage.add(rs.getInt("PackProgress"));
                
                
                pstmt = conn.prepareStatement(sql2);
                pstmt.setInt(1, studentID);
                ResultSet rs2 = pstmt.executeQuery();
                while (rs2.next()) {
                String FName = rs2.getString("FName");
                String LName = rs2.getString("LName");
                studentName.add(FName + " " +LName);
                }
                
            }
        
        } catch (SQLException e) {
            
        } 
        sql = "SELECT Buffer1 FROM QuizBuffer";
        sql2  = "SELECT Name FROM LearningPackages WHERE pack_ID = ?";
        
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
               int buffer1ID = rs.getInt("Buffer1");
                if (buffer1ID == 0){
                currentPack.add("None");   
               }
               else{
               PreparedStatement pstmt = conn.prepareStatement(sql2);
                pstmt.setInt(1, buffer1ID);
                ResultSet rs2 = pstmt.executeQuery();
                while (rs2.next()) {
                currentPack.add(rs2.getString("Name"));
                }
                }
            }
        }
        
        catch (SQLException e) {
            
        } 
        sql = "SELECT Buffer2 FROM QuizBuffer";
        sql2  = "SELECT Name FROM LearningPackages WHERE pack_ID = ?";
        
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
               int buffer2ID = rs.getInt("Buffer2");
                if (buffer2ID == 0){
                pack1.add("None");   
               }
               else{
               PreparedStatement pstmt = conn.prepareStatement(sql2);
                pstmt.setInt(1, buffer2ID);
                ResultSet rs2 = pstmt.executeQuery();
                while (rs2.next()) {
                pack1.add(rs2.getString("Name"));
                }
                }
            }
        }
        
        catch (SQLException e) {
            
        } 
        sql = "SELECT Buffer3 FROM QuizBuffer";
        sql2  = "SELECT Name FROM LearningPackages WHERE pack_ID = ?";
        
        try {
            Connection conn = databaseconn.connectToDB();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
               int buffer3ID = rs.getInt("Buffer3");
               if (buffer3ID == 0){
                pack2.add("None");   
               }
               else{
                PreparedStatement pstmt = conn.prepareStatement(sql2);
                pstmt.setInt(1, buffer3ID);
                ResultSet rs2 = pstmt.executeQuery();
                while (rs2.next()) {
                pack2.add(rs2.getString("Name"));
                }
                
               }
               
            }
        }
        
        catch (SQLException e) {
            
        } 
        for(int i = 0; i < studentName.size();i++){
            
            model.addRow(new Object[]{studentName.get(i),classID.get(i),currentPack.get(i),percentage.get(i),pack1.get(i),pack2.get(i)});
        }
        
    }//GEN-LAST:event_classSortButtonActionPerformed

    private void classSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classSortActionPerformed
        
    }//GEN-LAST:event_classSortActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel UserDetails;
    private javax.swing.JButton back;
    private javax.swing.JButton btnLogout3;
    private javax.swing.JComboBox<String> classSort;
    private javax.swing.JButton classSortButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblInformation;
    private javax.swing.JLabel lblLogo3;
    private javax.swing.JLabel lblUserLevel3;
    private javax.swing.JTable leaderboard;
    // End of variables declaration//GEN-END:variables
}
