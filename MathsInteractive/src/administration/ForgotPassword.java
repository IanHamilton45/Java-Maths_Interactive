//Author: Ian Hamilton - 15003706
package administration;

import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.mail.MessagingException;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.springframework.security.crypto.bcrypt.BCrypt;

/**
 *
 * @author Ian Hamilton - 15003706
 */
public class ForgotPassword extends javax.swing.JFrame {

    String firstName, lastName;
    int userID;

    /**
     * Creates new form ForgotPassword
     */
    public ForgotPassword() {
        initComponents();
        //TODO: Remove demo content
        inputEmail.setText("ian2.hamilton@northumbria.ac.uk");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblInformation = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        inputEmail = new javax.swing.JTextField();
        btnResetPassword = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Forgot Password");
        setBackground(new java.awt.Color(179, 218, 255));
        setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(179, 218, 255));

        lblInformation.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblInformation.setForeground(new java.awt.Color(200, 0, 0));
        lblInformation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInformation.setText(" ");

        lblEmail.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblEmail.setForeground(new java.awt.Color(5, 24, 42));
        lblEmail.setText("Email:");

        inputEmail.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        inputEmail.setForeground(new java.awt.Color(5, 24, 42));
        inputEmail.setMaximumSize(new java.awt.Dimension(6, 28));
        inputEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputEmailKeyPressed(evt);
            }
        });

        btnResetPassword.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnResetPassword.setForeground(new java.awt.Color(5, 24, 42));
        btnResetPassword.setText("Reset Password");
        btnResetPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblEmail)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnResetPassword)
                        .addGap(28, 28, 28))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInformation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnResetPassword)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Updates the database with the new password and emails the user it
     */
    private void resetPassword() {
        String enteredEmail = inputEmail.getText().trim();

        //--Check if the Email is empty
        if (enteredEmail.equals("")) {
            lblInformation.setText("Please enter an email.");
            return;
        }

        //-SQL for getting the user's ID and name
        String selectQuery = ("SELECT user_ID, FName, LName FROM UserDetails "
                + "WHERE Email = ?");
        int numberOfResults = 0;

        try {
            //-Connect to Database
            Connection conn = DBConnectA.connectToDB();
            //--Execute query
            PreparedStatement stmt = conn.prepareStatement(selectQuery);
            stmt.setString(1, enteredEmail);
            ResultSet selectResults = stmt.executeQuery();

            while (selectResults.next()) {
                this.userID = selectResults.getInt("user_ID");
                this.firstName = selectResults.getString("FName");
                this.lastName = selectResults.getString("LName");

                numberOfResults = numberOfResults + 1;
            }
        } catch (SQLException e) {
            lblInformation.setText("Database Connection Failed.");
            inputEmail.setText("");
            System.out.println(e);
            return;
        }

        //--If there are no matching emails, inform the user
        if (numberOfResults == 0) {
            lblInformation.setText("Email Not Found.");
            inputEmail.setText("");
            return;
        }

        //--Email address has been found in the database
        String newPassword = (firstName + Integer.toString(userID));
        //-Generate a password hash for the new password
        String newPasswordHash = BCrypt.hashpw(newPassword, BCrypt.gensalt());
        //-SQL to update the users password
        String updateSQL = ("UPDATE LoginCredentials SET passwordHash = ?, NeedNewPassword = 1 "
                + "WHERE user_ID = ?");

        try {
            //-Connect to Database
            Connection conn = DBConnectA.connectToDB();
            //--Execute update
            PreparedStatement updateStatement = conn.prepareStatement(updateSQL);
            updateStatement.setString(1, newPasswordHash);
            updateStatement.setInt(2, userID);

            updateStatement.executeUpdate();

            //--Email the user with their new password
            try {
                //-Create Mail class instance
                Mail newMail = new Mail(1, userID, firstName, lastName, newPassword, enteredEmail);

                //-Confirm the password email has been sent
                JOptionPane.showMessageDialog(null, "A new password has been emailed to you.", "Confirmation", JOptionPane.PLAIN_MESSAGE);

                //--Dispose of the window
                this.setVisible(false);
                this.dispose();
            } catch (MessagingException e) {
                //--The email failed to send, tell the user their new details
                String msg = ("Email failed. Your username is: " + Integer.toString(userID) + ". Your Password is: " + newPassword + ".");
                JOptionPane.showMessageDialog(null, msg, "Email Failed", JOptionPane.PLAIN_MESSAGE);
            }
        } catch (SQLException e) {
            lblInformation.setText("Update Failed.");
        }
    }

    /**
     * EventListener for when the user clicks reset password
     *
     * @param evt
     */
    private void btnResetPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetPasswordActionPerformed
        resetPassword();
    }//GEN-LAST:event_btnResetPasswordActionPerformed

    /**
     * EventListener for when the user hits enter on their keyboard instead of
     * clicking the button
     *
     * @param evt
     */
    private void inputEmailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputEmailKeyPressed
        //--The user has hit enter instead of clicking reset password
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            resetPassword();
        }
    }//GEN-LAST:event_inputEmailKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       //--Set the SeaGlass look and feel
        try {
            UIManager.setLookAndFeel("com.seaglasslookandfeel.SeaGlassLookAndFeel");
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
            e.getMessage();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnResetPassword;
    private javax.swing.JTextField inputEmail;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblInformation;
    // End of variables declaration//GEN-END:variables
}
